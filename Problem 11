def multiplier(n):
    """Procedure for multiplication of a list of numbers"""
    j = 1
    for i in n:
        j = j * i
    return j

def highest_set_numbers(lists):
    """Procedure to generate the highest multiplier in a list"""
    box = 4
    dictionary = {}                         #creates a dictionary for the multiplied values
    for index in range(0, (len(lists)) - 3):
        dictionary[multiplier((lists[index: index + box]))] = str(lists[index: index + box])
    seq = [key for key in dictionary.keys()]
    return max(seq), dictionary[max(seq)]   #outputs the highest value and the corresponding key

def left_facing_dict(lists):
    """Procedure to output a dictionary of the highest values on a row by row basis of a list"""
    dictionary = {}
    for list in lists:
        highest_val = highest_set_numbers(list)[1] #multiplied value
        corresponding_key = highest_set_numbers(list)[0]
        dictionary[highest_val] = corresponding_key
    return dictionary

def downward_facing_dict(lists):
    """Procedure to output a dictionary of the values of the transpose of the original list"""
    new_list = [list(x) for x in zip(*lists)]     #Transpose of the list
    return left_facing_dict(new_list)

def diagonal_left_(lists):
    """Procedure to output the left diagonal numbers into a list of lists"""
    new = [[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]
    for i in range(len(lists)):
        for n in range((len(lists)-i)):
            new[i].append(lists[n + i][n])
    return new

def diagonal_top_left(lists):
    """Procedure to output the left diagonal numbers into a list of lists"""
    new = [[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]
    for i in range(len(lists)):
        for n in range((len(lists)-i)):
            new[i].append(lists[n][n + i])
    return new

def diagonal_right(lists):
    """Procedure to output the right diagonal numbers into a list of lists"""
    new = [[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]
    for i in range(len(lists)):
        for n in range((len(lists)-i)):
            new[i].append(lists[len(lists)-n-1][n + i])
    return new

def diagonal_top_right(lists):
    """Procedure to output the right diagonal numbers into a list of lists"""
    new = [[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[],[]]
    for i in range(len(lists)):
        for n in range((len(lists)-i)):
            new[i].append(lists[n - i][len(lists)-n-1])
    return new

def max_output_per_dict(dictionary):
    key, value = max(dictionary.iteritems(), key=lambda x:x[1])
    return key, value

lists = [[8, 02, 22, 97, 38, 15, 00, 40, 00, 75, 4, 5, 7, 78, 52, 12, 50, 77, 91, 8],
         [49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 4, 56, 62, 00],
         [81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 3, 49, 13, 36, 65],
         [52, 70, 95, 23, 4, 60, 11, 42, 69, 24, 68, 56, 1, 32, 56, 71, 37, 02, 36, 91],
         [22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80],
         [24, 47, 32, 60, 99, 03, 45, 2, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50],
         [32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70],
         [67, 26, 20, 68, 2, 62, 12, 20, 95, 63, 94, 39, 63, 8, 40, 91, 66, 49, 94, 21],
         [24, 55, 58, 5, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72],
         [21, 36, 23, 9, 75, 00, 76, 44, 20, 45, 35, 14, 00, 61, 33, 97, 34, 31, 33, 95],
         [78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 3, 80, 4, 62, 16, 14, 9, 53, 56, 92],
         [16, 39, 5, 42, 96, 35, 31, 47, 55, 58, 88, 24, 00, 17, 54, 24, 36, 29, 85, 57],
         [86, 56, 00, 48, 35, 71, 89, 7, 5, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58],
         [19, 80, 81, 68, 5, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 4, 89, 55, 40],
         [4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66],
         [88, 36, 68, 87, 57, 62, 20, 72, 3, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69],
         [4, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 8, 46, 29, 32, 40, 62, 76, 36],
         [20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 4, 36, 16],
         [20, 73, 35, 29, 78, 31, 90, 1, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 5, 54],
         [1, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 1, 89, 19, 67, 48]]

left_dictionary = left_facing_dict(lists)
downward_dictionary = downward_facing_dict(lists)

left_diagonal = diagonal_left_(lists)
left_diagonal_dictionary = left_facing_dict(left_diagonal[0:17])

top_diagonal = diagonal_top_left(lists)
top_left_diagonal_dictionary = left_facing_dict(top_diagonal[0:17])

right_diagonal = diagonal_right(lists)
right_diagonal_dictionary = left_facing_dict(right_diagonal[0:17])

top_right_diagonal = diagonal_top_right(lists)
top_right_diagonal_dictionary = left_facing_dict(top_right_diagonal[0:17])

new_list = [downward_dictionary, left_diagonal_dictionary, top_left_diagonal_dictionary, right_diagonal_dictionary, top_right_diagonal_dictionary]

for dictionaries in new_list:
    max_result = []
    max_result.append(max_output_per_dict(dictionaries))
    print max_result
